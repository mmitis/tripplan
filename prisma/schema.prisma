// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum TripPollType {
  MULTISELECT
  SINGLESELECT
}

enum TripUserRole {
  CREATOR
  USER
  VIEWER
}

enum TripUserType {
  COMMON
  INVITE
}

enum TripTransportType {
  BUS
  PLANE
}

enum TripAccommodationProvider {
  BOOKING
}

enum TripTransportProvider {
  WIZZAIR
  RYANAIR
  LOCAL_TRAIN
  LOCAL_BUS
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  TripUser      TripUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trip {
  id        String   @id @default(uuid())
  name      String
  dateStart DateTime
  dateEnd   DateTime
  location  String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  locale   String
  currency String

  users         TripUser[]
  accommodation TripAccommodation[]
  transport     TripTransport[]
  poll          TripPoll[]
  see           TripSee[]
  hike          TripHike[]
  TripMap       TripMap[]
}

model TripAccommodation {
  id               String                    @id @default(uuid())
  name             String
  provider         TripAccommodationProvider
  confirmationLink String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  dateStart DateTime
  dateEnd   DateTime

  coverPhoto      String
  propertyAddress String
  propertyLink    String
  propertyPhone   String
  price           Float
  tripId          String

  trip Trip @relation(fields: [tripId], references: [id])
}

model TripTransport {
  id       String                @id @default(uuid())
  tripId   String
  type     TripTransportType
  provider TripTransportProvider

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  price        Float
  uniqueNumber String
  origin       String
  destination  String
  dateStart    DateTime
  dateEnd      DateTime
  comment      String?

  trip       Trip         @relation(fields: [tripId], references: [id])
  TripTicket TripTicket[]
}

model TripUser {
  id       String       @id @default(uuid())
  role     TripUserRole
  userType TripUserType
  tripId   String
  userId   String?
  email    String?

  trip Trip  @relation(fields: [tripId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  TripVote   TripVote[]
  TripTicket TripTicket[]
}

model TripPoll {
  id     String @id @default(uuid())
  tripId String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  name        String
  dateStart   DateTime
  dateEnd     DateTime
  type        TripPollType
  description String

  trip   Trip             @relation(fields: [tripId], references: [id])
  answer TripPollAnswer[]
}

model TripPollAnswer {
  id         String @id @default(uuid())
  tripPollId String

  name String

  poll TripPoll   @relation(fields: [tripPollId], references: [id])
  vote TripVote[]
}

model TripVote {
  id           String @id @default(uuid())
  tripAnswerId String
  tripUserId   String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  answer TripPollAnswer @relation(fields: [tripAnswerId], references: [id])
  user   TripUser       @relation(fields: [tripUserId], references: [id])

}

model TripSee {
  id             String  @id @default(uuid())
  tripId         String
  tripLocationId String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  name  String
  image String
  price Float

  trip     Trip          @relation(fields: [tripId], references: [id])
  location TripLocation? @relation(fields: [tripLocationId], references: [id])
}

model TripHike {
  id     String @id @default(uuid())
  tripId String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  name      String
  gpxFile   String
  length    Float
  dateStart DateTime

  trip Trip @relation(fields: [tripId], references: [id])
}

model TripLocation {
  id String @id @default(uuid())

  latitude  Float
  longitude Float

  see TripSee[]
}

model TripTicket {
  id String @id @default(uuid())

  tripTransportId String
  tripUserId      String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  image String

  transport TripTransport @relation(fields: [tripTransportId], references: [id])
  user      TripUser      @relation(fields: [tripUserId], references: [id])
}

model TripMap {
  id     String @id @default(uuid())
  tripId String

  name String
  url  String

  trip Trip @relation(fields: [tripId], references: [id])
}
